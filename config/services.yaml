# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:
    ninja: 'nevidimka'
    tokens:
        client1: pass1
        client2: pass2

services:
    _instanceof:
        App\Newsletter\NewsletterManager:
            tags: ['app.custom_tag']
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

        # makes classes in src/ available to be used as services
        # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    #monolog.formatter.session_request:
    #    class: Monolog\Formatter\LineFormatter
    #    arguments:
    #        - "[%%extra.test%%] [%%datetime%%] [%%extra.token%%] %%channel%%.%%level_name%%: %%message%% %%context%% %%extra%%\n"

    #Symfony\Bridge\Monolog\Processor\WebProcessor:
    #    tags:
    #        - { name: monolog.processor }
    #App\Logger\SessionRequestProcessor:
    #    tags:
    #        - { name: monolog.processor, handler: monolog_redis }

    Redis:
        class: Predis\Client
        arguments:
            - '%env(resolve:REDIS_DSN)%'
            - { retry_interval: 2, timeout: 30 }

    Symfony\Component\HttpFoundation\Session\Storage\Handler\RedisSessionHandler:
        arguments:
            - '@Redis'
            - { ttl: !closure '@ttl.handler' }

    ttl.handler:
        class: App\Session\TtlHandler

    App\Routing\CustomRouteLoader:
        tags: [ routing.loader ]

    #    App\Routing\AdvancedLoader:
    #        tags: [ routing.loader ]

    App\EventListener\RequestListener:
        tags:
            - { name: kernel.event_listener, event: kernel.request }

    App\Service\MessageGenerator:
        arguments:
            $logger: '@monolog.logger.request'
            $str: 'something'

    site_update_manager.superadmin:
        class: App\Service\SiteUpdaterManager
        # you CAN still use autowiring: we just want to show what it looks like without
        autowire: false
        # manually wire all arguments
        arguments:
            - '@App\Service\MessageGenerator'
            - '@mailer'
            - 'superadmin@example.com'

    site_update_manager.normal_users:
        class: App\Service\SiteUpdaterManager
        autowire: false
        arguments:
            - '@App\Service\MessageGenerator'
            - '@mailer'
            - 'contact@example.com'

    App\Service\SiteUpdaterManager: '@site_update_manager.superadmin'

    App\Service\TwitterClient:
        autowire: true

    transformer:
        class: App\Util\Rot13Transformer
        autowire: true
        tags: [ 'trans', 'trans1' ]
        lazy: true

    testalias: '@transformer'
    App\Util\Rot13Transformer: '@transformer'
    #App\Util\TransformerInterface: '@transformer'

    App\Controller\DiController: ~

    #App\Util\Rot13Transformer: ~
    #App\Util\UppercaseTransformer: ~

    #App\Util\TransformerInterface $shoutyTransformer: '@App\Util\UppercaseTransformer'
    #App\Util\TransformerInterface: '@App\Util\Rot13Transformer'

    App\Mail\EmailConfigurator: ~
    App\Mail\EmailFormatterManager: ~

    App\Mail\NewsletterManager:
        configurator: '@App\Mail\EmailConfigurator'

    App\Mail\GreetingCardManager:
        configurator: [ '@App\Mail\EmailConfigurator', 'configure' ]

    App\Mail\MailerConfiguration: ~

    App\Mail\Mailer:
        arguments: [ '@=service("App\\Mail\\MailerConfiguration").getMailerMethod()' ]
        properties:
            asd: 'KUKAREK'

    #if method is non-static
    #App\Email\NewsletterManagerFactory: ~

    App\Email\NewsletterManager:
        factory: [ 'App\Email\NewsletterManagerStaticFactory', 'createNewsletterManager' ]
        arguments: ['test_arg']

    App\Email\NewsletterManagerInterface:
        # use the "tracable_newsletter" service when debug is enabled, "newsletter" otherwise.
        # "@=" indicates that this is an expression
        factory: '@=parameter("kernel.debug") ? service("traceable_newsletter") : service("newsletter")'

    # you can use the arg() function to retrieve an argument from the definition
    #App\Email\NewsletterManagerInterface:
    #    factory: "@=arg(0).createNewsletterManager() ?: service("default_newsletter_manager")"
    #    arguments:
    #        - '@App\Email\NewsletterManagerFactory'

    App\Email\NotExistEmailService:
        calls:
            - setService: ['@?notexist']

    App\Repository\BaseDoctrineRepository:
        abstract: true
        arguments: ['@doctrine.orm.entity_manager']
        calls:
            - setLogger: ['@logger']

    App\Repository\DoctrineUserRepository:
        parent: App\Repository\BaseDoctrineRepository

    App\Repository\DoctrinePostRepository:
        parent: App\Repository\BaseDoctrineRepository
        # overrides the first argument (using the special index_N key)
#        arguments:
#            index_0: '@doctrine.custom_entity_manager'

    App\Newsletter\NewsletterManager:
        arguments: ['@request_stack']
        tags:
            - { name: 't_name', alias: 't_alias' }

    App\Newsletter\DMailer: ~

    App\Newsletter\DecoratingMailer:
        decorates: App\Newsletter\DMailer
        arguments: ['@.inner']

    #app.command_handler_locator:
    #    class: Symfony\Component\DependencyInjection\ServiceLocator
    #    arguments:
    #        -   App\FooCommand: '@app.command_handler.foo'
    #            App\BarCommand: '@app.command_handler.bar'

    #App\CommandBus:
    #    arguments:
    #        - !service_locator
    #        App\FooCommand: '@app.command_handler.foo'
    #       App\BarCommand: '@app.command_handler.bar'
    #    tags:
    #        - { name: 'container.service_subscriber', key: 'logger', id: 'monolog.logger.event' }

    #App\Handler\One:
    #    tags:
    #        - { name: 'app.handler', key: 'handler_one' }

    #App\Handler\Two:
    #    tags:
    #        - { name: 'app.handler', key: 'handler_two' }

    #App\Handler\HandlerCollection:
        # inject all services tagged with app.handler as first argument
    #    shared: false
    #    arguments: [ !tagged_locator { tag: 'app.handler', index_by: 'key' } ]

    #$container->set('app.synthetic_service', $theService); в процессе выполнения кода
    app.synthetic_service:
        synthetic: true

    App\EventListener\EntityListener:
        tags:
            -
                name: 'doctrine.event_listener'
                event: 'prePersist'
                priority: 500
                connection: 'default'